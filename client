#!/usr/bin/env python3
import json
import ssl
import socket
import argparse
import random
import sys


def create_tcp_socket(hostname, port):
    tcp_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        tcp_sock.connect((hostname, port))
        return tcp_sock
    except socket.error as e:
        print(f"Error connecting to {hostname}: {e}")
        sys.exit(1)


def create_tls_socket(hostname):
    port = 27994
    tcp_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        tcp_sock.connect((hostname, port))
        context = ssl.create_default_context()
        tls_sock = context.wrap_socket(tcp_sock, server_hostname=hostname)
        return tls_sock
    except ssl.SSLError as e:
        print(f"SSL Error: {e}")
        sys.exit(1)
    except socket.error as e:
        print(f"Error connecting to {hostname}: {e}")
        sys.exit(1)


def main():
    parser = argparse.ArgumentParser(description='Wordle client')
    parser.add_argument('hostname', help='Server hostname')
    parser.add_argument('username', help='Northeastern username')
    parser.add_argument('-p', type=int, default=27993, help='Port number')
    parser.add_argument('-s', action='store_true', help='Use TLS encryption')
    args = parser.parse_args()

    if args.s:
        tls_sock = create_tls_socket(args.hostname)
    else:
        tcp_sock = create_tcp_socket(args.hostname, args.p)

    hello = '{"type": "hello", "northeastern_username": "' + args.username + '"}\n'
    f = open('project1-words.txt', 'r')
    contents = f.read()
    f.close()
    listed = contents.split("\n")

    encoded = hello.encode()
    try:
        if args.s:
            tls_sock.send(encoded)
        else:
            tcp_sock.send(encoded)
    except socket.error as e:
        print(f"Error sending hello message: {e}")
        sys.exit(1)

    try:
        if args.s:
            output = tls_sock.recv(1024).decode()
        else:
            output = tcp_sock.recv(1024).decode()
    except socket.error as e:
        print(f"Error receiving response: {e}")
        sys.exit(1)

    response = json.loads(output)
    guessed = get_word(listed, response)
    first_guess(guessed, tls_sock if args.s else tcp_sock, listed)


# First guess function that encodes, sends, and decodes the message,
# then starts the loop to keep guessing subsequent words.
def first_guess(guessed, sock, listed):
    encoded = guessed.encode()
    sock.send(encoded)
    output = sock.recv(1024).decode()
    response = json.loads(output)
    guess(response, sock, listed)


# Function used to get the unique ID as well as a new word to guess,
# but only for the first guess.
def get_word(listed, response):
    my_id = response.get('id')
    word = listed[random.randint(0, len(listed) - 1)]
    guessed = '{"type": "guess", "id": "' + my_id + '", "word":' + ' "' + word + '"}\n'
    return guessed


# Function for sending messages to the server.
def send_message(message, sock, listed):
    encoded = message.encode()
    sock.send(encoded)
    receive(sock, listed)


# Function for receiving messages from the server, and then directing to the next guess.
def receive(sock, listed):
    output = sock.recv(1024).decode()
    response = json.loads(output)
    guess(response, sock, listed)


# Function used to generate a guess, as well as loop the code and
# eliminate any words that don't work given the hints from the server.
def guess(response, sock, listed):
    my_id = response.get('id')
    word = listed[random.randint(0, len(listed) - 1)]
    guessed = '{"type": "guess", "id": "' + my_id + '", "word":' + ' "' + word + '"}\n'
    if 'flag' in response.keys():
        print(str(response.get('flag')))
        sys.exit(0)
    else:
        while not ('flag' in response.keys()):
            dict_list = response.get('guesses')
            for dicts in dict_list:
                marks = dicts.get('marks')
                for x in range(0, 5):
                    if marks[x] == 0 or marks[x] == 1:
                        for words in listed:
                            if words[x] == dicts.get('word')[x]:
                                listed.remove(words)
            send_message(guessed, sock, listed)


if __name__ == '__main__':
    main()
